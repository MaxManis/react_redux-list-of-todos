{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","api.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","status","qwery","filterReducer","query","Todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","todos","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppSelector","useDispatch","useSelector","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoList","isLoading","setIsLoading","dispatch","visibleTodos","title","toLowerCase","match","completed","useEffect","response","todosActions","catch","Error","finally","length","className","map","classNames","id","onClick","currentTodoActions","TodoFilter","filters","onSubmit","event","preventDefault","onChange","e","newStatus","target","value","filterActions","placeholder","newQwery","style","pointerEvents","Loader","TodoModal","useState","currentUser","setCurrentUser","userId","href","email","name","App","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eac5e8c6.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    // Implement all actions here\n    case 'currentTodo/SET':\n      return action.payload;\n\n    case 'currentTodo/REMOVE':\n      return null;\n\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","type SetStatusAction = {\n  type: 'filter/SET_STATUS',\n  payload: string,\n};\n\ntype SetQweryAction = {\n  type: 'filter/SET_QWERY',\n  payload: string,\n};\n\ntype DeleteQweryAction = {\n  type: 'filter/DELETE_QWERY',\n};\n\nconst setStatus = (status: string): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\nconst setQwery = (qwery: string): SetQweryAction => ({\n  type: 'filter/SET_QWERY',\n  payload: qwery,\n});\n\nconst deleteQwery = (): DeleteQweryAction => ({\n  type: 'filter/DELETE_QWERY',\n});\n\nexport const actions = {\n  setStatus,\n  setQwery,\n  deleteQwery,\n};\n\ntype State = {\n  status: string | null,\n  query: string | null,\n} | null;\n\ntype Action = SetStatusAction | SetQweryAction | DeleteQweryAction;\n\nconst filterReducer = (\n  state: State = null,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      };\n\n    case 'filter/SET_QWERY':\n      return {\n        ...state,\n        query: action.payload,\n      };\n    case 'filter/DELETE_QWERY':\n      return {\n        ...state,\n        query: '',\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = {\n  type: 'todos/SET',\n  payload: Todo[],\n};\n\nconst setTodos = (Todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET',\n  payload: Todos,\n});\n\nexport const actions = { setTodos };\n\nconst todosReducer = (\n  state: Todo[] = [],\n  action: SetTodosAction,\n): Todo[] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n//\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n//\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n//\n","/* eslint-disable max-len */\nimport React, { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport classNames from 'classnames';\nimport { useAppSelector } from '../../app/hooks';\nimport { getTodos } from '../../api';\n\nimport { actions as todosActions } from '../../features/todos';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nimport { Todo } from '../../types/Todo';\nimport { Filter } from '../../types/Filter';\n\ntype Props = {\n  isLoading: boolean,\n  setIsLoading: (value: boolean) => void,\n};\n\nexport const TodoList: React.FC<Props> = ({ isLoading, setIsLoading }) => {\n  const todos: Todo[] = useAppSelector(state => state.todos);\n  const filter: Filter = useAppSelector(state => state.filter);\n  const currentTodo: Todo | null = useAppSelector(state => state.currentTodo);\n\n  const dispatch = useDispatch();\n\n  const visibleTodos = todos.filter(todo => {\n    if (filter && filter.query) {\n      return todo.title.toLowerCase().match(filter.query.toLowerCase());\n    }\n\n    return todo;\n  }).filter(todo => {\n    if (filter && filter.status) {\n      switch (filter.status) {\n        case 'active':\n          return !todo.completed;\n        case 'completed':\n          return todo.completed;\n        default:\n          return todo;\n      }\n    }\n\n    return todo;\n  });\n\n  const setCurrentTodo = (newCurrentTodo: Todo) => {\n    dispatch(currentTodoActions.setTodo(newCurrentTodo));\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getTodos()\n      .then((response) => {\n        dispatch(todosActions.setTodos(response));\n      })\n      .catch(() => {\n        throw new Error('Error');\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <>\n      {!isLoading && visibleTodos.length === 0 && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {!isLoading && visibleTodos.length > 0 && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(todo => {\n              return (\n                <tr\n                  key={todo.id}\n                  data-cy=\"todo\"\n                  className={classNames({\n                    'has-background-info-light': todo.id === currentTodo?.id,\n                  })}\n                >\n                  <td className=\"is-vcentered\">{todo.id}</td>\n                  <td className=\"is-vcentered\">\n                    {todo.completed && (\n                      <span className=\"icon\" data-cy=\"iconCompleted\">\n                        <i className=\"fas fa-check\" />\n                      </span>\n                    )}\n                  </td>\n\n                  <td className=\"is-vcentered is-expanded\">\n                    <p\n                      className={classNames({\n                        'has-text-success': todo.completed,\n                        'has-text-danger': !todo.completed,\n                      })}\n                    >\n                      {todo.title}\n                    </p>\n                  </td>\n\n                  <td className=\"has-text-right is-vcentered\">\n                    <button\n                      data-cy=\"selectButton\"\n                      className=\"button\"\n                      type=\"button\"\n                      onClick={() => setCurrentTodo(todo)}\n                    >\n                      <span className=\"icon\">\n                        { todo.id !== currentTodo?.id\n                          ? (\n                            <i className=\"far fa-eye\" />\n                          ) : (\n                            <i className=\"far fa-eye-slash\" />\n                          )}\n                      </span>\n                    </button>\n                  </td>\n                </tr>\n              );\n            })}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as filterActions } from '../../features/filter';\nimport { useAppSelector } from '../../app/hooks';\nimport { Filter } from '../../types/Filter';\n\nexport const TodoFilter: React.FC = () => {\n  const filters: Filter = useAppSelector(state => state.filter);\n\n  const dispatch = useDispatch();\n\n  const onSetStatus = (newStatus: string) => (\n    dispatch(filterActions.setStatus(newStatus))\n  );\n\n  const onSetQwery = (newQwery: string) => (\n    dispatch(filterActions.setQwery(newQwery))\n  );\n\n  const onDeleteQwery = () => (\n    dispatch(filterActions.deleteQwery())\n  );\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={event => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            onChange={e => onSetStatus(e.target.value)}\n            data-cy=\"statusSelect\"\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={filters?.query || ''}\n          onChange={(e) => onSetQwery(e.target.value)}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {filters?.query && (\n            <>\n              {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n              <button\n                data-cy=\"clearSearchButton\"\n                type=\"button\"\n                className=\"delete\"\n                onClick={onDeleteQwery}\n              />\n            </>\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n//\n","import React, { useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\n\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  currentTodo: Todo,\n};\n\nexport const TodoModal: React.FC<Props> = ({ currentTodo }) => {\n  const [currentUser, setCurrentUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const dispatch = useDispatch();\n\n  const removeCurrentTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getUser(currentTodo.userId)\n      .then((response) => {\n        setCurrentUser(response);\n      })\n      .catch(() => {\n        throw new Error('Error on user loading');\n      })\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              Todo #\n              {currentTodo.id}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={removeCurrentTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">{currentTodo.title}</p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n\n              {' by '}\n              <a href={`mailto:${currentUser?.email}`}>{currentUser?.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { useAppSelector } from './app/hooks';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\n\nimport { Todo } from './types/Todo';\n\nexport const App: React.FC = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const currentTodo: Todo | null = useAppSelector(state => state.currentTodo);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isLoading && <Loader />}\n\n              <TodoList isLoading={isLoading} setIsLoading={setIsLoading} />\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal currentTodo={currentTodo} />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n//\n"],"sourceRoot":""}